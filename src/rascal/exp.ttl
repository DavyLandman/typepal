test E1 [[ 1 + 2 ]]
test E2 [[ 1 + 2.5 ]]
test E3 [[ 1 + true ]] expect { "No version of `+` is applicable" }

test And1 [[ true && false ]]
test And2 [[ 1 && false ]] expect { "Argument of && should be `bool`, found `int`"}
test And3 [[ true && "abc" ]] expect { "Argument of && should be `bool`, found `str`"}

test Or1 [[ true || false ]]
test Or2 [[ 1 || false ]] expect { "Argument of || should be `bool`, found `int`"}
test Or3 [[ true || "abc" ]] expect { "Argument of || should be `bool`, found `str`"}

test Lst1 [[ [] ]]
test Lst2 [[ [1,2] + 1 ]]
test Lst3 [[ 1 + [2,3] ]]
test Lst4 [[ 1 + [] ]]
test Lst5 [[ [] + 1 ]]
test Lst6 [[ 1 + [1.5] ]]
test Lst7 [[ 1 + [true] ]]

test Set1 [[ {} ]]
test Set2 [[ {1,2} + 1 ]]
test Set3 [[ 1 + {2,3} ]]
test Set4 [[ 1 + {} ]]
test Set5 [[ {} + 1 ]]
test Set6 [[ 1 + {1.5} ]]
test Set7 [[ 1 + {true} ]]

test Stat1 [[ 1 + {true, 2} ]]
test Stat2 [[ {int n = 1;} ]]
test Stat3 [[ { n = 1; n = true; } ]]
test Stat4 [[ { n = 1; n = 1.5; n + 2;} ]]

test Stat5 [[ { n = 1; m = n; n + 2;} ]]
test Stat6 [[ { n = 1; m = n;  m = 1.5; n + 2;} ]]
test Stat7 [[ { l = []; l = l + 1.5; } ]]
test Stat8 [[ { l = []; m = l; l = m + 1.5; } ]]
test Stat9 [[ { l = []; m = l; l = l + 1.5; } ]]
test Stat10 [[ { l = []; m = l; m = m + 1.5; } ]]
test Stat11 [[ { l = []; m = l; n = m; m = m + 1.5; n = n + 2r3; } ]]

test IfElse1 [[ { if(true) 10; else 11; } ]]
test IfElse2 [[ { if(1) 10; else 11; } ]] expect {"Condition should be `bool`, found `int`"}

test IfThen1 [[ { if(true) 10;} ]]
test IfThen2 [[ { if(1) 10; } ]] expect {"Condition should be `bool`, found `int`"}

