# Architecture of TypePal

.Synopsis
Architectural overview of TypePal

.Description

Type checking using TypePal proceeds in the following stages:

* _Parse_ the program to be analyzed using its syntax definition;
* _Extract_ facts and requirements from the resulting parse tree, yielding an `FRModel`;
* _Validate_ the `FRModel`.

This whole process starts with a syntax for the language we want to analyze (let's call that language _L_ for now). 
The _L_ syntax is used to parse the _L_ program we want to type check. The result is a parse tree.

The extraction of facts and requirements from the resulting parse tree is based on the builder pattern:
first a new `FRBuilder` (an `FRModel` builder) is created and that enables the author of the type checker
to add facts and requirements to the `FRModel` depending on the specific input program.
Extraction uses the parse tree, the `FRBuilder`, and user-supplied declarations for the types in _L_ (`AType`)
as well as rules for extracting definitions (`define`) and collecting facts and requirements (`collect`).

The result of extraction is an `FRModel` that can be validated.
The validation phase can be further specialized by providing declarations for:

* Functions to check subtype (`getSubtype`) and least upperbound (`getLUB`) of two types.
* Functions to filter the results of name resolution.

The result of validation is an enriched `FRModel` that contains, amongst others, messages regarding violated requirements.
It can be used to generate other usefull information about the program such as a use-def relation and
the used vocabulary (used for name completion).


image::Architecture.png[800,600,align="center"]